#
# My zsh prompt
#

pmodload 'helper'

prompt_jaagr_clear_screen() {
  # enable output to terminal
  zle -I
  # clear screen and move cursor to (0, 0)
  print -n '\e[2J\e[0;0H'
  # print preprompt
  prompt_jaagr_preprompt_render precmd
}

prompt_jaagr_string_length_to_var() {
  local str=$1 var=$2 length
  # perform expansion on str and check length
  length=$(( ${#${(S%%)str//(\%([KF1]|)\{*\}|\%[Bbkf])}} ))

  # store string length in variable as specified by caller
  typeset -g "${var}"="${length}"
}

prompt_jaagr_setup() {
  # prevent percentage showing up
  # if output doesn't end with a newline
  export PROMPT_EOL_MARK=''

  prompt_opts=(subst percent)

  zmodload zsh/datetime
  zmodload zsh/zle
  zmodload zsh/parameter

  autoload -Uz add-zsh-hook

  add-zsh-hook precmd prompt_jaagr_precmd
  add-zsh-hook preexec prompt_jaagr_preexec

  zle -N clear-screen prompt_jaagr_clear_screen

  # Set git-info parameters
  # zstyle ':prezto:module:git:info' verbose 'yes'
  zstyle ':prezto:module:git:info:dirty'  format ' %B± %%b%b'
  zstyle ':prezto:module:git:info:branch' format ' %B%K{9}%F{white} %b %%b%f%k'
  zstyle ':prezto:module:git:info:keys'   format 'rprompt' '%c%s%D%b'
  zstyle ':prezto:module:git:info' verbose 'yes'

  # Set editor-info parameters
  zstyle ':prezto:module:editor:info:keymap:alternate' format '%F{1}─%f%K{1}%F{0} cmd %f%k%F{1}─%f'

  PROMPT='%(?.%F{8}.%F{1})${editor_info:+${(e)editor_info[keymap]:-───────}} %f'
  RPROMPT='%(?..%F{red} %?%f)'
  # Define prompts
  # PROMPT='%(?.%F{8}.%F{red})%~%f ─────'
  # RPROMPT='${git_info[rprompt]}${editor_info[keymap]}%(?..%F{red} %?%f)'
  # BR=$'\n'
  # PROMPT='${BR}%(?.%F{8}.%F{1})%~ %f${BR}%F{8}${editor_info:+${(e)editor_info[keymap]:-───────}}%f'
  # RPROMPT='${git_info:+${(e)git_info[rprompt]}}%(?..%F{red} %?%f)'
  # SPROMPT='zsh: correct %F{magenta}%R%f to %F{green}%r%f [nyae]? '
}

prompt_jaagr_preprompt_render() {
  # store the current prompt_subst setting so that it can be restored later
  local prompt_subst_status=$options[prompt_subst]

  # make sure prompt_subst is unset to prevent parameter expansion in preprompt
  setopt local_options no_prompt_subst

  [[ -n ${prompt_jaagr_cmd_timestamp+x} && "$1" != "precmd" ]] && return

  # set color for git branch/dirty status, change color if dirty checking has been delayed
  local git_color=242
  [[ -n ${prompt_jaagr_git_last_dirty_check_timestamp+x} ]] && git_color=red

  # construct preprompt
  local preprompt="%F{3}%~%f\n"

  # make sure prompt_jaagr_last_preprompt is a global array
  typeset -g -a prompt_jaagr_last_preprompt

  # if executing through precmd, do not perform fancy terminal editing
  if [[ "$1" == "precmd" ]]; then
    print -P "\n${preprompt}"
  else
    # only redraw if the expanded preprompt has changed
    [[ "${prompt_jaagr_last_preprompt[2]}" != "${(S%%)preprompt}" ]] || return

    # calculate length of preprompt and store it locally in preprompt_length
    integer preprompt_length lines
    prompt_jaagr_string_length_to_var "${preprompt}" "preprompt_length"

    # calculate number of preprompt lines for redraw purposes
    (( lines = ( preprompt_length - 1 ) / COLUMNS + 1 ))

    # calculate previous preprompt lines to figure out how the new preprompt should behave
    integer last_preprompt_length last_lines
    prompt_jaagr_string_length_to_var "${prompt_jaagr_last_preprompt[1]}" "last_preprompt_length"
    (( last_lines = ( last_preprompt_length - 1 ) / COLUMNS + 1 ))

    # clr_prev_preprompt erases visual artifacts from previous preprompt
    local clr_prev_preprompt
    if (( last_lines > lines )); then
      # move cursor up by last_lines, clear the line and move it down by one line
      clr_prev_preprompt="\e[${last_lines}A\e[2K\e[1B"
      while (( last_lines - lines > 1 )); do
        # clear the line and move cursor down by one
        clr_prev_preprompt+='\e[2K\e[1B'
        (( last_lines-- ))
      done

      # move cursor into correct position for preprompt update
      clr_prev_preprompt+="\e[${lines}B"
    # create more space for preprompt if new preprompt has more lines than last
    elif (( last_lines < lines )); then
      # move cursor using newlines because ansi cursor movement can't push the cursor beyond the last line
      printf $'\n'%.0s {1..$(( lines - last_lines ))}
    fi

    # disable clearing of line if last char of preprompt is last column of terminal
    local clr='\e[K'
    (( COLUMNS * lines == preprompt_length )) && clr=

    # modify previous preprompt
    print -Pn "${clr_prev_preprompt}\e[${lines}A\e[${COLUMNS}D${preprompt}${clr}\n"

    if [[ $prompt_subst_status = 'on' ]]; then
      # re-eanble prompt_subst for expansion on PS1
      setopt prompt_subst
    fi

    # redraw prompt (also resets cursor position)
    zle && zle .reset-prompt
  fi

  # store both unexpanded and expanded preprompt for comparison
  prompt_jaagr_last_preprompt=("$preprompt" "${(S%%)preprompt}")
}

prompt_jaagr_preexec() {
  prompt_jaagr_cmd_timestamp=$EPOCHSECONDS

  # shows the current dir and executed command in the title while a process is active
  prompt_jaagr_set_title 'ignore-escape' "$PWD:t: $2"
}

prompt_jaagr_precmd() {
  prompt_jaagr_cmd_timestamp=

  # shows the full path in the title
  prompt_jaagr_set_title 'expand-prompt' '%~'

  # get vcs info
  if (( $+functions[git-info] )); then
    git-info
  fi

  # print the preprompt
  prompt_jaagr_preprompt_render "precmd"

  # remove the prompt_jaagr_cmd_timestamp, indicating that precmd has completed
  unset prompt_jaagr_cmd_timestamp
}

prompt_jaagr_set_title() {
  # tell the terminal we are setting the title
  print -n '\e]0;'

  # show hostname if connected through ssh
  [[ -n $SSH_CONNECTION ]] && print -Pn '(%m) '
  case $1 in
    expand-prompt)
      print -Pn $2;;
    ignore-escape)
      print -rn $2;;
  esac

  # end set title
  print -n '\a'
}

prompt_jaagr_setup "$@"

# vim:ft=zsh
